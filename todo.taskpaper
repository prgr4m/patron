Project Generator:
	Obviously this establishes the base of this tool.
	Here are what needs to be kept in from the original tool and what needs to
	be left out by sectional generation/scaffolding

	- DOCUMENTATION!!!!!
	- TESTING!!! Do not release into the wild until unittested. May work functionally but have some unittests
	- Change the public blueprint test specific not just to the site but to the public blueprint
	- Make a generic deploy task in fabfile.py @fabric
	FactoryInjector:
		- have base yield by line @done(2014-09-12)
		- regexp strategy for dynamically injecting and figuring out sections... @today
		- have the base do the actual injecting? but each type of injector create the rules of injection
	root directory:
		manage.py:
		StencilConfig:
	application package:
		Here is a list of things I should be doing by default...
		public package:

Blueprint Generator:
	- hook into app factory

Models Generator:
	- check heading of every page... doesn't exist? add it
	- every model generated must have a __str__ and __repr__ method
	- needs to know what blueprint to add to since tool runs from root of project

Forms Generator:
	- check heading of every page... doesn't exist? add it
	- needs to know what blueprint to add to since tool runs from root of project

Addons:
	admin:
		- hook into app factory (admin and auth) @today
	api:
		- create api.py
		- hook into app factory
		- should be its own blueprint/package?
		- dependent upon admin because of auth
	sitemap:
		- added to public blueprint
		- only public facing routes and only include api routes if no auth
	livereload:
		- this is questionable since I should separate client from server
	blog:
		- its own custom blueprint...
		- dependent upon admin
		- custom admin views
		- ckeditor integration
		- rss feed functionality that hooks into public blueprint
	cms:
		- should be its own type of project scaffold since it requires several components and functionality rolled into one
		- requires admin
		- requires blog mainly because of all of the leg work it does
		- hijacks public routing
		- requires sitemaps
	cron job / ops helpers:
		- command(s) to hook into flask-script/click to generate crontab entry common to maintenance @nice_feature
	humanizer:
		- self explanatory
		- this is a blueprint
	mail:
		- flask-mail integration
		- cli/interactive driven
		- hooks into registration and alters config object
	ecommerce:
		- with satchless and stripe
		- "shopping cart" blueprint with admin_views and models
	banning interface:
		- models with banning
		- context processor hook or route hijacking... maybe use signals...
	websockets:
		- tbd
Unittests:
	- convert to Flask-Testing unittests
	- models
	- blueprints
	- forms

Extras:
	These are prebuilt flask projects with a specific purpose in mind. These 
	types of projects aren't meant to be extended so much as they have 
	- static site generator
	- service api endpoint (using json or xml)
	- cms (similar to static site generator but dependent upon a database and a server)
	- video steaming service?

Archive:
	- THIS TOOL SHOULD ONLY BE RUN FROM THE PROJECT ROOT!!! @done(2014-09-10) @project(Project Generator)
	  - need to list out project name @done(2014-09-10) @project(Project Generator / root directory / StencilConfig)
		- need to have subparser on cli to remove, inspect and generate a config for each project... from root @done(2014-09-12)
	- change unittest format to reflect what exactly is being tested @today @done(2014-09-11) @project(Blueprint Generator)
	- create auth @today @done(2014-09-12) @project(Addons / admin)
	- create users @today @done(2014-09-12) @project(Addons / admin)
	- don't forget to add UserCommand to manage.py @done(2014-09-12) @project(Addons / admin)
	- take out livereload (this should be an addon) @done(2014-09-07) @project(Project Generator / root directory / manage.py)
	- keep the tests @done(2014-09-07) @project(Project Generator / root directory / manage.py)
	- ADD REQUIREMENTS FILE!!! @done(2014-09-09) @project(Project Generator / root directory / manage.py)
	- create hidden stencil project file that maps out what's been added and where's what @done(2014-09-09) @project(Project Generator / root directory / manage.py)
	- blueprints need the following @done(2014-09-10) @project(Project Generator / root directory / StencilConfig)
		- what files are listed within the directory @done(2014-09-10)
	- have a list of addons used @done(2014-09-10) @project(Project Generator / root directory / StencilConfig)
	- where is the creation of the flask app @done(2014-09-10) @project(Project Generator / root directory / StencilConfig)
	- where is the settings file for the flask app @done(2014-09-10) @project(Project Generator / root directory / StencilConfig)
	- do not create api.py... this is an addon @done(2014-09-08) @project(Project Generator / application package)
	- do not create assets.py... for front-end @done(2014-09-08) @project(Project Generator / application package)
	- auth.py belongs to admin addon @done(2014-09-08) @project(Project Generator / application package)
	- extensions.py @done(2014-09-08) @project(Project Generator / application package)
	- do not create helpers.py @done(2014-09-08) @project(Project Generator / application package)
	- meta.jade template takes $project_name @done(2014-09-08) @project(Project Generator / application package)
	- templates stay within itself @done(2014-09-08) @project(Project Generator / application package / public package)
	- remove registration method from view module @done(2014-09-08) @project(Project Generator / application package / public package)
	- models.py template heading @done(2014-09-08) @project(Project Generator / application package / public package)
	- needs to check if the blueprint exists already @done(2014-09-10) @project(Blueprint Generator)
	- create unittests when generated @done(2014-09-10) @project(Blueprint Generator)
	- check for name collisions @done(2014-09-10) @project(Blueprint Generator)
	- make sure that templates stay within the blueprint itself @done(2014-09-10) @project(Blueprint Generator)
	- every models.py (gets a default heading) @done(2014-09-10) @project(Blueprint Generator)
	- every forms.py (gets a default heading) @done(2014-09-10) @project(Blueprint Generator)
	- add to stencil config @done(2014-09-10) @project(Blueprint Generator)
