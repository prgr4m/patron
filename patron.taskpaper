Patron:
My task list of things to do while developing this application since no one has 
opened up an issue :(
	General:
		- patron logo
		- injections.json
			- where [factory | settings | view]
			- type [extension | blueprint]
			- snippet
			- import
		- move generators into main package (rewrite but keep old files until refactor)
	Cli Parser:
		- argcompletion for linux
	Project Scaffolding:
		- clean up and remove certain frontend elements offered by frontend addon
	Documentation:
		- feature matrix in regards to padrino but flask conventions
		- roadmap of implementation features
		- list of package dependencies by addon
		- urls pointing to other project documentation for user convenience
		- each feature gets its own page also explaining why I've done things the way they are
		- add commands documentation that are injected by each addon
		- create list of packages being used by each addon and why
	Form Generator:
		- similar to model generator
	Static Site Generator:
		- add as an addon
	Base:
		- move all things considered front-end out
	Blueprints:
		- should be able to create methods/function routes on cli as well
	Patron Config:
	Model Generator:
		- shorter commands without losing meaning? explicit is better than implicit...
		- update cli documentation for models
		- if admin addon present, generate admin.py models... and auto register
		- double check the relations declaration... backref_name-value
	Front-End Addon:
		- overwrite .bowerrc and point to frontend dir
		- revise to have SPA work flow separated
		- remove requirejs and move into spa/app directory
		- remove jade templates and move into spa/app
	Admin Addon:
		- fix admin scaffolding to create media in static directory
		- make view only care about view and move everything into its own admin.py
		- make login, logout and registration public routes via injection
		- break out user models and management into its own component/package
		- auto generate user package
		- move bower call into post_gen_project.py?
	Users Addon:
		- change commands on creating superuser to be able to run more than once
		- remove duplicate delete user command
		- revise commands file completely to PEP8
		- fix delete user command and not delete a role
		- commands should use wtforms for cli validation
		- break auth and login out of admin and put into extensions file for configuration
		- user package inject login and principal
	Blog Addon:
		- revise to give user more structure rather than base models and bare templates
		- add whooshalchemy
	Injectors:
		- refactor and break out into each scaffolds section
		- make injections user configurable
  Addons:
		API:
			- possibly its own cli subgroup for adding and autoregistration (after addon is present)
			- should have login route
			- httpauth
			- tokens
		Commerce:
			- satchless?
    Mailer:
			- should this use celery? I just don't want to add more development dependencies
Archive:
	- adaptable parser pending on scaffold type @done(2014-11-10) @project(opened up an issue  / Cli Parser)
	- modify lookups not based on blueprints/addons but by resources @done(2014-11-10) @project(opened up an issue  / Cli Parser)
	- remove from project @done(2014-11-10) @project(opened up an issue  / Static Site Generator)
	- redo to be simplistic but with minimum info to get job done @done(2014-11-10) @project(opened up an issue  / Patron Config)
	- python 3.x support @done(2014-11-04) @project(opened up an issue  / General)
