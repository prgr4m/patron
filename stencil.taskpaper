Project Generator:
	Obviously this establishes the base of this tool.
	Here are what needs to be kept in from the original tool and what needs to
	be left out by sectional generation/scaffolding

	- DOCUMENTATION!!!!!
	- TESTING!!! Do not release into the wild until unittested. May work functionally but have some unittests
	- Change the public blueprint test specific not just to the site but to the public blueprint
	- Make a generic deploy task in fabfile.py @fabric
	- package generation (similar to blueprint w/o registering with app. tracked in config [as blueprint] and hooked into other blueprints) @cli
	- CATCH ALL EXCEPTIONS!!!
	- refactor interface between lib and bin so mccabe can shutup
	- all injector code should have their own template scripts (if code is too long to inject)
	- double check to make sure the static generator sitemap reads all pages!
	ArgComplete:
		- autocompletion for generator type
		- autocompletion for package/blueprint/namespace type
	SettingsInjector:
		- come up with strategy different from factory and manage injectors @addons

Models Generator:
	In the future I should have extensible formatting to generate model fields...
	Example
		'name:str', 'name:string', 'name:str:30' - where it also give a length but defaults to 30
	Some fields should have a sensible default for the type if nothing is supplied not the column

Forms Generator:
	Obviously there are going to be a couple of iterations within this generator and models. 
	They are both similar but different in implementation since flask-sqlalchemy has everything 
	tucked nicely away under the db object and wtforms isn't. So I'll eventually have to write 
	an import checker with some crazy regex action!... yay!/s
	- needs to know what namespace/blueprint to add to since tool runs from root of project

Addons:
	admin:
		- have all things that require auth permission inherit from a base in separate file
	api:
		- create api.py
		- hook into app factory
		- should be its own blueprint/package?
		- dependent upon admin because of auth
	sitemap:
	livereload:
	blog:
		- sitemap injection for both database and static (posts and tags)
		- add feed link in head on blog root for both database and static
		- sanitize user content
	humanizer:
		- self explanatory
		- this is a package!
	mail:
		- flask-mail integration
		- cli/interactive driven?
		- hooks into registration and alters config object
	ecommerce:
		- with satchless and stripe
		- "shopping cart" blueprint with admin_views and models
	banning interface:
		- models with banning
		- context processor hook or route hijacking... maybe use signals...
	websockets:
		- tbd (or just use tornado.io)
Unittests:
	- convert to Flask-Testing unittests
	- models
	- blueprints
	- forms

Extras:
	These are prebuilt flask projects with a specific purpose in mind. These 
	types of projects aren't meant to be extended so much as they have 
	- static site generator using python-optimage
	- static site generator using webassets cli through fabric
	- service api endpoint (using json or xml)
	- video steaming service?

Archive:
	- add sitemap functionality by default to the public route @done(2014-09-27) @project(Project Generator)
	- its own custom blueprint... @done(2014-09-27) @project(Addons / blog)
	- dependent upon admin @done(2014-09-27) @project(Addons / blog)
	- custom admin views @done(2014-09-27) @project(Addons / blog)
	- ckeditor integration @done(2014-09-27) @project(Addons / blog)
	- rss feed functionality that hooks into public blueprint @done(2014-09-27) @project(Addons / blog)
	- has 2 versions, flat-pages version and database driven with admin @done(2014-09-28) @project(Addons / blog)
	- static site generator @done(2014-09-25) @project(Extras)
	- only public facing routes and only include api routes if no auth @done(2014-09-25) @project(Addons / sitemap)
	- not questionable for static site generator for previewing content @done(2014-09-25) @project(Addons / livereload)
	- add livereload for development requirements @done(2014-09-24) @project(Project Generator)
	- added to public blueprint @done(2014-09-23) @project(Addons / sitemap)
	- every model generated must have a __str__ and __repr__ method @done(2014-09-14) @project(Models Generator)
	- needs to know what namespace/blueprint to add to since tool runs from root of project @done(2014-09-14) @project(Models Generator)
	- have base yield by line @done(2014-09-12) @project(Project Generator / FactoryInjector)
	- regexp strategy for dynamically injecting and figuring out sections... @today @done(2014-09-13) @project(Project Generator / FactoryInjector)
	- have the base do the actual injecting? but each type of injector create the rules of injection @done(2014-09-13) @project(Project Generator / FactoryInjector)
	- hook into app factory @done(2014-09-13) @project(Blueprint Generator)
	- hook into app factory (admin and auth) @today @done(2014-09-13) @project(Addons / admin)
	- add to requirements file flask-admin, flask-login, flask-principal @done(2014-09-13) @project(Addons / admin)
	- THIS TOOL SHOULD ONLY BE RUN FROM THE PROJECT ROOT!!! @done(2014-09-10) @project(Project Generator)
	  - need to list out project name @done(2014-09-10) @project(Project Generator / root directory / StencilConfig)
		- need to have subparser on cli to remove, inspect and generate a config for each project... from root @done(2014-09-12)
	- change unittest format to reflect what exactly is being tested @today @done(2014-09-11) @project(Blueprint Generator)
	- create auth @today @done(2014-09-12) @project(Addons / admin)
	- create users @today @done(2014-09-12) @project(Addons / admin)
	- don't forget to add UserCommand to manage.py @done(2014-09-12) @project(Addons / admin)
	- take out livereload (this should be an addon) @done(2014-09-07) @project(Project Generator / root directory / manage.py)
	- keep the tests @done(2014-09-07) @project(Project Generator / root directory / manage.py)
	- ADD REQUIREMENTS FILE!!! @done(2014-09-09) @project(Project Generator / root directory / manage.py)
	- create hidden stencil project file that maps out what's been added and where's what @done(2014-09-09) @project(Project Generator / root directory / manage.py)
	- blueprints need the following @done(2014-09-10) @project(Project Generator / root directory / StencilConfig)
		- what files are listed within the directory @done(2014-09-10)
	- have a list of addons used @done(2014-09-10) @project(Project Generator / root directory / StencilConfig)
	- where is the creation of the flask app @done(2014-09-10) @project(Project Generator / root directory / StencilConfig)
	- where is the settings file for the flask app @done(2014-09-10) @project(Project Generator / root directory / StencilConfig)
	- do not create api.py... this is an addon @done(2014-09-08) @project(Project Generator / application package)
	- do not create assets.py... for front-end @done(2014-09-08) @project(Project Generator / application package)
	- auth.py belongs to admin addon @done(2014-09-08) @project(Project Generator / application package)
	- extensions.py @done(2014-09-08) @project(Project Generator / application package)
	- do not create helpers.py @done(2014-09-08) @project(Project Generator / application package)
	- meta.jade template takes $project_name @done(2014-09-08) @project(Project Generator / application package)
	- templates stay within itself @done(2014-09-08) @project(Project Generator / application package / public package)
	- remove registration method from view module @done(2014-09-08) @project(Project Generator / application package / public package)
	- models.py template heading @done(2014-09-08) @project(Project Generator / application package / public package)
	- needs to check if the blueprint exists already @done(2014-09-10) @project(Blueprint Generator)
	- create unittests when generated @done(2014-09-10) @project(Blueprint Generator)
	- check for name collisions @done(2014-09-10) @project(Blueprint Generator)
	- make sure that templates stay within the blueprint itself @done(2014-09-10) @project(Blueprint Generator)
	- every models.py (gets a default heading) @done(2014-09-10) @project(Blueprint Generator)
	- every forms.py (gets a default heading) @done(2014-09-10) @project(Blueprint Generator)
	- add to stencil config @done(2014-09-10) @project(Blueprint Generator)
